package individuo;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import logica.Calculadora;

public class Poblacion {

	private List<Individuo> individuos;
	private int pos_mejor;
	private int pos_peor;
	private double sumadap;
	private double prec;
	private int torneo;
	private int tam_elite;
	private boolean[] elite;
	private int[] sel_elite;
	private boolean elitismo;
	private int tipoAlgoritmo; //0: MINIMIZACION, 1: MAXIMIZACION

	//==========================================
	//============= CONSTRUCTORA ===============
	//==========================================

	public Poblacion(int argf1, Object argf2,int tipoAlgoritmo, Individuo prototipo, int tam_pob, Object x_min, Object x_max, double prec, boolean elitismo) {
		this.tipoAlgoritmo = tipoAlgoritmo;
		init();
		this.prec = prec;
		Individuo unIndividuo = null;

		for(int i=0;i<tam_pob;i++) {
			unIndividuo = prototipo.newInstance(x_min, x_max, prec);
			individuos.add(unIndividuo);
		}

		this.torneo = argf1;
		this.elitismo = elitismo;
		this.tam_elite = this.size()*2/100;
		this.elite = new boolean[this.size()];

		for(int i=0;i<this.size();i++) {
			elite[i] = false;
		};
	}

	// =========================
	// == METODOS PUBLICOS
	// =========================

	public Individuo dameMejor() {
		return individuos.get(pos_mejor);
	}

	public Individuo damePeor() {
		return individuos.get(pos_peor);
	}

	public void evaluacion() {
		sumadap = 0; 			//SUMA DE LA ADAPTACION
		double punt_acu = 0;	//PUNTUACION ACUMULADA DE LOS INDIVIDUOS
		Individuo pIndividuo = null;

		Iterator<Individuo> unIterador = individuos.iterator();

		int i = 0;
		while(unIterador.hasNext()) {
			pIndividuo = unIterador.next();
			sumadap+= pIndividuo.getadaptacion();
			if((i==0) || pIndividuo.getadaptacion_bruta()>individuos.get(pos_mejor).getadaptacion_bruta()) {
				pos_mejor=i;
			}
			if((i==0) || pIndividuo.getadaptacion_bruta()<individuos.get(pos_peor).getadaptacion_bruta()) {
				pos_peor=i;
			}
			i++;
		}

		unIterador = individuos.iterator();
		while(unIterador.hasNext()) {
			pIndividuo = unIterador.next();
			pIndividuo.setPuntuacion((double)pIndividuo.getadaptacion()/(double)sumadap);
			punt_acu+= pIndividuo.getPuntuacion();
			pIndividuo.setPunt_acu(punt_acu);
		}
	}

	public void desplazar() {
		//MARGEN PARA EVITAR SUMADAPTACION = 0 SI CONVERGE LA POBLACION
		double maximo = individuos.get(pos_mejor).getadaptacion_bruta()*1.05;

		Iterator<Individuo> unIterador = individuos.iterator();
		Individuo pIndividuo = null;
		while(unIterador.hasNext()) {
			pIndividuo = unIterador.next();
			pIndividuo.setadaptacion(maximo-pIndividuo.getadaptacion_bruta());
		}
	}

	//MUESTREO ESTOCASTICO UNIVERSAL
	public void seleccionEstadistico() {
		int[] sel_super = new int[this.size()]; 									//SELECCIONADOS PARA SOBREVIVIR
		double a = new Random().nextDouble() * (((double) 1) / this.size());
		double prob; 															//PROBABILIDAD DE SELECCION
		int pos_super; 															//POSICION DEL SUPERVIVIENTE
		List<Individuo> pob_aux = new ArrayList<Individuo>(); 					//POBLACION AUXILIAR

		Iterator<Individuo> unIterador = individuos.iterator();

		int j = 0;
		while(unIterador.hasNext()) {
			unIterador.next();

			if(this.elite[j])
				sel_super[j] = j;
			else {
				prob = (a + j -1)/this.size();
				pos_super = 0;
				while((pos_super<this.size()) && (prob>individuos.get(pos_super).getPunt_acu())) {
					pos_super++;
					if(pos_super == this.size()) break;
				}
				if(pos_super == this.size())
					pos_super--;
				sel_super[j] = pos_super;
			}
			j++;
		}

		//SE GENERA LA POBLACION INTERMEDIA
		for(int i=0;i<this.size();i++) {
			pob_aux.add(individuos.get(sel_super[i]).clone());
		}

		//MACHACO POBLACION ANTERIOR Y LA REEMPLAZO CON LA DE SUPERVIVIENTES
		init();
		unIterador = pob_aux.iterator();
		while(unIterador.hasNext()) {
			individuos.add(unIterador.next().clone());
		}
	}

	public void seleccionTorneo() {
		double aptitud_mejor = 0;
		int[] sel_super = new int[this.size()]; 				//SELECCIONADOS PARA SOBREVIVIR
		int  prob; 												//PROBABILIDAD DE SELECCION
		int pos_super = 0; 										//POSICION DEL SUPERVIVIENTE
		List<Individuo> pob_aux = new ArrayList<Individuo>();	//POBLACION AUXILIAR

		Iterator<Individuo> unIterador=individuos.iterator();

		for(int i=0;i<this.size();i++) {
			if (this.elite[i])
				sel_super[i]=i;
			else {
				for(int j=0;j<this.torneo;j++) {
					prob = new Random().nextInt(this.size());
					if(j == 0) {
						aptitud_mejor = individuos.get(prob).getadaptacion();
						pos_super = prob;
					} else if(aptitud_mejor < individuos.get(prob).getadaptacion()) {
						aptitud_mejor = individuos.get(prob).getadaptacion();
						pos_super = prob;
					}
				}
				sel_super[i] = pos_super;
			}
		}

		//SE GENERA LA POBLACION INTERMEDIA
		for(int i=0;i<this.size();i++) {
			pob_aux.add(individuos.get(sel_super[i]).clone());
		}

		//MACHACO POBLACION ANTERIOR Y LA REEMPLAZO CON LA DE SUPERVIVIENTES
		init();
		unIterador = pob_aux.iterator();
		while(unIterador.hasNext()) {
			individuos.add(unIterador.next().clone());
		}
	}

	public void seleccionRuleta() {
		int[] sel_super = new int[this.size()]; 				//SELECCIONADOS PARA SOBREVIVIR
		double prob; 											//PROBABILIDAD DE SELECCION
		int pos_super; 											//POSICION DEL SUPERVIVIENTE
		List<Individuo> pob_aux = new ArrayList<Individuo>(); 	//POBLACION AUXILIAR

		Iterator<Individuo> unIterador = individuos.iterator();

		int j = 0;
		while(unIterador.hasNext()) {
			unIterador.next();
			if(this.elite[j])
				sel_super[j] = j;
			else {
				prob = Math.random();
				pos_super = 0;
				while((pos_super<this.size()) && (prob>individuos.get(pos_super).getPunt_acu())) {
					pos_super++;
					if(pos_super == this.size()) break;
				}
				if (pos_super == this.size())
					pos_super--;
				sel_super[j] = pos_super;
			}
			j++;
		}

		//SE GENERA LA POBLACION INTERMEDIA
		for(int i=0;i<this.size();i++) {
			pob_aux.add(individuos.get(sel_super[i]).clone());
		}

		//MACHACO POBLACION ANTERIOR Y LA REEMPLAZO CON LA DE SUPERVIVIENTES
		init();
		unIterador = pob_aux.iterator();
		while(unIterador.hasNext()) {
			individuos.add(unIterador.next().clone());
		}
	}

	public void seleccionRanking() {

	}

	public void seleccionRestos() {

	}

	public void seleccionTrucamiento() {

	}

	public void reproduccion(double prob_cruce, Object x_min, Object x_max, int tCruce) {
		int lcrom = individuos.get(0).damelCrom();
		double sel_cruce[] = new double [this.size()];	//SELECCIONADOS PARA REPRODUCIRSE
		int num_sel_cruce = 0;							//CONTADOR DE SELECCIONADOS
		double prob;
		Individuo hijo1, hijo2;

		//SE ELIGEN LOS INDIVIDUOS A CRUZAR
		for(int i=0;i<this.size();i++) {
			//SE GENERAN TAM_POB NÃºMEROS ALETATORIOS 1, EN [0,1]
			prob = Math.random();
			//SE ELIGEN LOS INDIVIDUOS DE LAS POSICIONES I
			//CON AI< PROB_CRUCE
			if(prob < prob_cruce) {
				sel_cruce[num_sel_cruce] = i;
				num_sel_cruce++;
			}
		}

		//EL NUMERO DE SELECCIONADOS SE HACE PAR
		if ((num_sel_cruce % 2) == 1)
			num_sel_cruce--;

		//SE CRUZAN LOS INDIVIDUOS ELEGIDOS EN UN PUNTO AL AZAR
		int punto_cruce = 0 + (int)(Math.random() * ((lcrom-0) + 1));
		Individuo[] unReturn = new Individuo[2];
		for(int i=0;i<num_sel_cruce;i+=2) {
			switch (tCruce) {				
				case 0:
					unReturn = crucePmx(individuos.get(i), individuos.get(i+1), punto_cruce, x_min, x_max);
					break;
				case 1:
					unReturn = cruceOx(individuos.get(i), individuos.get(i+1), punto_cruce, x_min, x_max);
					break;
				case 2:
					unReturn = cruceOxPosPrior(individuos.get(i), individuos.get(i+1), punto_cruce, x_min, x_max);
					break;
				case 3:
					unReturn = cruceOxOrdPrior(individuos.get(i), individuos.get(i+1), punto_cruce, x_min, x_max);
					break;
				case 4:
					unReturn = cruceCiclos(individuos.get(i), individuos.get(i+1), punto_cruce, x_min, x_max);
					break;
				case 5:
					unReturn = cruceRecombinacionRutas(individuos.get(i), individuos.get(i+1), punto_cruce, x_min, x_max);
					break;
				case 6:
					unReturn = cruceOrdinal(individuos.get(i), individuos.get(i+1), punto_cruce, x_min, x_max);
					break;
				case 7:
					unReturn = crucePropio(individuos.get(i), individuos.get(i+1), punto_cruce, x_min, x_max);
					break;
			}
			hijo1 = unReturn[0];
			hijo2 = unReturn[1];

			//LOS NUEVOS INDIVIDUOS SUTITUYEN A SUS PROGENITORES,RESPETANDO LA ELITE
			if(esMejor(hijo1.getadaptacion_bruta(),individuos.get(i).getadaptacion_bruta()) && !this.elite[i])
				individuos.set(i,hijo1);
			if(esMejor(hijo2.getadaptacion_bruta(),individuos.get(i+1).getadaptacion_bruta()) && !this.elite[i+1])
				individuos.set(i+1,hijo2);
		}
	}

	public void mutacion(double prob_mut,int tipoMutacion) {
		Integer lcrom = individuos.get(0).damelCrom();
		boolean mutado;
		double prob;

		for(int i=0;i<this.size();i++) {
			mutado = false;
			//for(int j=0;j<lcrom && !this.elite[i];j++) {
				//SE GENERA UN NUMERO ALEATORIO EN [0 1)
				prob = Math.random();
				//SE MUTAN AQUELLOS GENES CON PROB < QUE PROB_MUT
				if(prob<prob_mut && !this.elite[i]) {
					//individuos.get(i).genes.get(j).muta();
					//switch ....
					//MUTACION
					switch (tipoMutacion) {
						case 0:
							mutacionInsercion(i);
							break;
						case 1:
							mutacionIntercambio(i);
							break;
						case 2:
							mutacionInversion(i);
							break;
						case 3:
							mutacionHeuristica(i);
							break;
						case 4:
							mutacionInventada(i);
							break;
						default:
							mutacionInsercion(i);
							break;
					}
					mutado = true;
				}

			if(mutado)
				individuos.get(i).adaptacion_bruta = individuos.get(i).calculaadaptacion_bruta();
		}

	}

	public void generarElite() {
		if(!elitismo) return;

		sel_elite = new int[this.tam_elite]; //seleccionados como la elite
		elite = new boolean[this.size()];

		for(int i=0;i<tam_elite;i++) {
			sel_elite[i] = i;
		}

		ordenar_por_adaptacion();

		for(int i=tam_elite;i<this.size();i++) {
			int j = 0;
			while(j<tam_elite && esMejor(individuos.get(sel_elite[j]).getadaptacion_bruta(),individuos.get(i).getadaptacion_bruta())) {
				j++;
			}
			if (j < tam_elite) {
				insertar_ordenadamente (j, i);
			}
		}

		for(int i=0;i<tam_elite;i++) {
			this.elite[sel_elite[i]] = true;
		}
	}

	// =========================
	// == METODOS PRIVADOS
	// =========================

	private int size() {
		return individuos.size();
	}

	private void init() {
		individuos = new ArrayList<Individuo>();
		pos_mejor = 0;
		pos_peor = 0;
		sumadap = 0;
	}

	private boolean esMejor(Double a, Double b) {
		switch (this.tipoAlgoritmo) {
			case 0:
				return a < b;
			case 1:
				return a > b;
			default:
				return a < b;
		}
	}

	
	private Individuo[] crucePmx (Individuo padre1, Individuo padre2, int punto_cruce, Object x_min, Object x_max) {
		Integer lcrom = padre1.damelCrom();
		Individuo hijo1 = padre1.newInstance(x_min, x_max, prec);
		Individuo hijo2 = padre2.newInstance(x_min, x_max, prec);
		Individuo[] unReturn = {hijo1,hijo2};

		return unReturn;
	}

	static boolean contiene(List<Gen> unCromosoma, Gen unGen, int a, int b , int lcrom)
	{
		boolean ret=false;
		int i=a;
		
		while((!ret) && i<=b && i<lcrom )
		{
			ret=unCromosoma.get(i).equals(unGen);
			i++;
		}
				
		return ret;
	}
	
	
	
	
	//rellena huecos .. desde el principio
		void cruceOx_aux(Individuo padre,Individuo hijo, int lcrom)
		{
		
			
			
			int r=0;		
			int i=0;
			//relleno desde principio
			while(i<lcrom && r < lcrom)//&&rellenados<maxRellenar)
			{
				if (hijo.genes.get(r).estaVacio())
				{
					if (!contiene(hijo.genes,padre.genes.get(i),0,lcrom-1,lcrom))
					{
						hijo.genes.set(r, padre.genes.get(i).clone());
						r++;						
					}
					
					i++;
				}
				else			
				{
					r++;					
				}		
			hijo.decod(); //debug	 
				
			}
						
		}

	
	private Individuo[] cruceOx (Individuo padre1, Individuo padre2, int punto_cruce, Object x_min, Object x_max) {
		Integer lcrom = padre1.damelCrom();
		Individuo hijo1 = padre1.newInstance(x_min, x_max, prec);
		hijo1.borraGenes(); //genes a -1
		Individuo hijo2 = padre2.newInstance(x_min, x_max, prec);		
		hijo2.borraGenes(); //genes a -1
		//Elegir aleatoriamente dos puntos de corte.
		//pCorte1<pCorte2
		int pCorte1 = Calculadora.dameRandom(0, lcrom-3);
		int pCorte2 = Calculadora.dameRandom(pCorte1+2, lcrom-1);		
		//Copiar los valores de las subcadenas comprendidas entre
		//dichos puntos en los hijos que se generan.
		for (int i=pCorte1+1;i<pCorte2;i++)
		{
			hijo1.genes.set(i, padre2.genes.get(i).clone());			
			hijo2.genes.set(i, padre1.genes.get(i).clone());	
			hijo1.decod();
			hijo2.decod();
		}
		
		/*
		 * Para los valores que faltan en los hijos se copian los
		valores de los padres comenzando a partir de la zona
		copiada y respetando el orden:
		 */
		/*
		 * Si un valor no estÃ¡ en la subcadena intercambiada, se
		copia igual.
		 Si estÃ¡ en la subcadena intercambiada, entonces se
		pasa al siguiente posible.
		*/		
		
		//relleno hijo1 con elementos de padre1
		 this.cruceOx_aux(padre1, hijo1, lcrom);
		
		
		
		
		
		//relleno hijo2 con elementos de padre2
		this.cruceOx_aux(padre2, hijo2,lcrom);
		
		
		
		
		
		
		
		Individuo[] unReturn = {hijo1,hijo2};
		
		
		return unReturn;
	}
	
	int cruceOxPosPriorPunto_aux(Individuo padre, Individuo hijo,int lcrom)
	{
		int a=0;
		boolean seguir=true;
					
			//saco indices random que me sirvan para hijo1
			while (seguir)
			{
			a=Calculadora.dameRandom(0, lcrom-1);
			seguir=(
					!hijo.genes.get(a).estaVacio()
					|| contiene(hijo.genes,padre.genes.get(a),0,lcrom-1,lcrom)					
					)
					;			
			
		}
			
		return a;
	}
	private Individuo[] cruceOxPosPrior (Individuo padre1, Individuo padre2, int punto_cruce, Object x_min, Object x_max) {
		Integer lcrom = padre1.damelCrom();
		Individuo hijo1 = padre1.newInstance(x_min, x_max, prec);
		hijo1.borraGenes(); //genes a -1
		Individuo hijo2 = padre2.newInstance(x_min, x_max, prec);		
		hijo2.borraGenes(); //genes a -1		
		//puntos al azar, para cruzar
		int num_randoms=Calculadora.dameRandom(0, lcrom-1);
		for (int i=0;i<num_randoms;i++)
		{
		int a=cruceOxPosPriorPunto_aux(padre2,hijo1,lcrom);
		int b=cruceOxPosPriorPunto_aux(padre1,hijo2,lcrom);	
		hijo1.genes.set(a, padre2.genes.get(a).clone());			
		hijo2.genes.set(b, padre1.genes.get(b).clone());	
		hijo1.decod();
		hijo2.decod();
		}
		
		/*
		 * Para los valores que faltan en los hijos se copian los
		valores de los padres comenzando a partir de la zona
		copiada y respetando el orden:
		 */
		/*
		 * Si un valor no estÃ¡ en la subcadena intercambiada, se
		copia igual.
		 Si estÃ¡ en la subcadena intercambiada, entonces se
		pasa al siguiente posible.
		*/		
			
		
		//relleno hijo1 con elementos de padre1
		this.cruceOx_aux(padre1, hijo1,lcrom);
		//actualizo indices
					
		
		
		
		//relleno hijo2 con elementos de padre2
		this.cruceOx_aux(padre2, hijo2, lcrom);
		
		
		Individuo[] unReturn = {hijo1,hijo2};
		
		
		return unReturn;
	}
	
	boolean contiene (Integer[] cadena, int num)
	{
		boolean enc=false;		
		int i=0;
		while(!enc&&i<cadena.length)
		{
			enc=cadena[i].intValue()==num;
			i++;
		}
		
		return enc;
		
	}
	
	void damePosiciones(Integer[] cadena, int lcrom)
	{
		
		for (int i=0;i<cadena.length;i++)
		{
			cadena[i]=-1;
		}
		
		int ret=0;
		int a =Calculadora.dameRandom(0, lcrom-1);
		for (int i=0;i<cadena.length;i++)
		{
			while (contiene(cadena,a))
			{
				a=Calculadora.dameRandom(0, lcrom-1);
			}
			cadena[i]=new Integer(a);
		}
		
	}
	
	//busca los valores elegidos de padre1, en padre2
	Integer[] cruceOxOrdPrior_transforma(Individuo padre1,Individuo padre2, Integer[] cadena,int lcrom)
	{
		Integer[] unaCadena=new Integer[cadena.length];
		
		for (int i=0;i<cadena.length;i++)
		{
			int r=0;
			boolean enc=false;
			while (!enc && r<lcrom)
			{
				enc=padre1.genes.get(cadena[i]).equals(padre2.genes.get(r));
				if (!enc) r++;
			}
			unaCadena[i]=r;
		}		
		
		return unaCadena;
	}
	
	void antiCopiaOX(Individuo padre, Individuo hijo, Integer[] cadena, int lcrom)
	{
		for (int i=0;i<lcrom; i++)
		{
			if (!contiene(cadena,i))
			{
				hijo.genes.set(i, padre.genes.get(i));
			}
		}
	}
	
	private Individuo[] cruceOxOrdPrior (Individuo padre1, Individuo padre2, int punto_cruce, Object x_min, Object x_max) {
		
		/*
		 * Los individuos no intercambian ciudades, sino el orden
		relativo existente entre ellas.
		 */
		Integer lcrom = padre1.damelCrom();
		Individuo hijo1 = padre1.newInstance(x_min, x_max, prec);
		hijo1.borraGenes(); //genes a -1
		Individuo hijo2 = padre2.newInstance(x_min, x_max, prec);		
		hijo2.borraGenes(); //genes a -1
		//Elegir aleatoriamente dos puntos de corte.
		//pCorte1<pCorte2
		int pCorte1 = Calculadora.dameRandom(0, lcrom-3);
		int pCorte2 = Calculadora.dameRandom(pCorte1+2, lcrom-1);		
		//de estos punto de corte, salen las posiciones a intercambiar
		int num_randoms=pCorte2-pCorte1-1;
		
		
		//genero num_randoms posiciones, de padre1 
		Integer[] conjuntoPosiciones=new Integer[num_randoms];
		damePosiciones(conjuntoPosiciones,lcrom);	
		
		
		//obtengo posiciones en padre2
		Integer[] otrasPosiciones=
				cruceOxOrdPrior_transforma(padre1,padre2,conjuntoPosiciones,lcrom);	
		//copio elementos no-descartados de padre2 en hijo1
		antiCopiaOX(padre2,hijo1,otrasPosiciones,lcrom);
		
		
		//hago lo mismo para hijo2
				//obtengo posiciones en padre2
				otrasPosiciones=
						cruceOxOrdPrior_transforma(padre2,padre1,conjuntoPosiciones,lcrom);	
				//copio elementos no-descartados de padre2 en hijo1
				antiCopiaOX(padre1,hijo2,otrasPosiciones,lcrom);
			
		/*
		 * Para los valores que faltan en los hijos se copian los
		valores de los padres comenzando a partir de la zona
		copiada y respetando el orden:
		 */
		/*
		 * Si un valor no estÃ¡ en la subcadena intercambiada, se
		copia igual.
		 Si estÃ¡ en la subcadena intercambiada, entonces se
		pasa al siguiente posible.
		*/		
			
		
		//relleno hijo1 con elementos de padre1
		this.cruceOx_aux(padre1, hijo1,lcrom);
		//actualizo indices
						
		
		//relleno hijo2 con elementos de padre2
		this.cruceOx_aux(padre2, hijo2,lcrom);
		
		hijo1.decod();
		hijo2.decod();
		Individuo[] unReturn = {hijo1,hijo2};
		
		
		return unReturn;
		
	}

	private Individuo[] cruceCiclos (Individuo padre1, Individuo padre2, int punto_cruce, Object x_min, Object x_max) {
		Integer lcrom = padre1.damelCrom();
		Individuo hijo1 = padre1.newInstance(x_min, x_max, prec);
		Individuo hijo2 = padre2.newInstance(x_min, x_max, prec);
		Individuo[] unReturn = {hijo1,hijo2};

		return unReturn;
	}

	//basicametne no hace nada, porque todas estÃ¡n igua de conectadas
	//hace Randoms's
	int dameMenosConectada(int ciudad, int[][] unaMatriz, Integer[] listaPos, int lcrom)
	{		
		int a= Calculadora.dameRandom(0, lcrom-1);
		
		while (contiene(listaPos,a))
		{
			a=Calculadora.dameRandom(0, lcrom-1);
		}
		listaPos[ciudad+1]=new Integer(a);

		return a;
		
	}
	//Â¿Es este cromosoma viable?
	boolean esBloqueo(Integer[]ListaPos, int[][] unaMatriz)
	{
		return false;
	}
	
	//profundiza demasiado, hace falta abstraer
	//Â¡GRAN CHAPUZA!
	void construirRecomb(Individuo hijo,Gen unGen,int[][] unaMatriz,int lcrom)
	{
		Integer[] listaPos=new Integer[lcrom];
		for (int i=1;i<listaPos.length;i++)
		{
			listaPos[i]=-1;
		}
		
		
		//empiezo con primera ciudad del padre (unGen)
		listaPos[0]=(Integer)unGen.clone().bit;
		hijo.genes.set(0,unGen.clone());
		
		
		boolean bloqueo=true;
		while(bloqueo)
		{
		for (int i=1;i<lcrom;i++)
			{
			listaPos[i]=dameMenosConectada(i-1,unaMatriz,listaPos,lcrom);		
			}
		bloqueo=esBloqueo(listaPos, unaMatriz);
		}
		
		//una vez generado , convierto la secuencia a genes
		//CHAPUZA
		for (int i=1;i<lcrom;i++)
		{
			hijo.genes.set(i, new Gen_f1(listaPos[i]));
		}
		
	}
	
	private Individuo[] cruceRecombinacionRutas (Individuo padre1, Individuo padre2, int punto_cruce, Object x_min, Object x_max) {
		Integer lcrom = padre1.damelCrom();
		Individuo hijo1 = padre1.newInstance(x_min, x_max, prec);
		hijo1.borraGenes(); //genes a -1
		Individuo hijo2 = padre2.newInstance(x_min, x_max, prec);		
		hijo2.borraGenes(); //genes a -1
		
		//construyo matriz de adyacencia
		int[][] unaMatriz= new int[lcrom][lcrom];
		//da la casualidad de que en mi matriz, todas las ciudades estÃ¡n interconectadas entre sÃ­
		for (int i=0;i<lcrom;i++)
		{
			for (int j=0;j<lcrom;j++)
			{
				unaMatriz[i][j]=j;
			}
		}
		
		//construyo hijo1, con primer elemento de padre2
		construirRecomb(hijo1,padre2.genes.get(0),unaMatriz,lcrom);
		
		//construyo hijo2, con primer elemento de padre1
		construirRecomb(hijo2,padre1.genes.get(0),unaMatriz,lcrom);
				
		
		
		hijo1.decod();
		hijo2.decod();
		Individuo[] unReturn = {hijo1,hijo2};

		return unReturn;
	}

	private Individuo[] cruceOrdinal (Individuo padre1, Individuo padre2, int punto_cruce, Object x_min, Object x_max) {
		Integer lcrom = padre1.damelCrom();
		Individuo hijo1 = padre1.newInstance(x_min, x_max, prec);
		Individuo hijo2 = padre2.newInstance(x_min, x_max, prec);
		Individuo[] unReturn = {hijo1,hijo2};

		return unReturn;
	}

	private Individuo[] crucePropio (Individuo padre1, Individuo padre2, int punto_cruce, Object x_min, Object x_max) {
		Integer lcrom = padre1.damelCrom();
		Individuo hijo1 = padre1.newInstance(x_min, x_max, prec);
		Individuo hijo2 = padre2.newInstance(x_min, x_max, prec);
		Individuo[] unReturn = {hijo1,hijo2};

		return unReturn;
	}

	private void insertar_ordenadamente(int pos, int valor) {
		for (int i=pos+1;i<this.tam_elite;i++) {
			this.sel_elite[i] = sel_elite[i-1];
		}
		sel_elite[pos] = valor;
	}

	private void ordenar_por_adaptacion() {
		 int j;
	     boolean flag = true;
	     int temp;

	     while(flag) {
            flag = false;
            for(j=0;j<tam_elite-1;j++) {
               if ( esMejor (individuos.get( sel_elite[ j ]).getadaptacion_bruta(), individuos.get( sel_elite[ j+1 ]).getadaptacion_bruta() )) {
	               temp = sel_elite[ j ];
	               sel_elite[ j ] = sel_elite[ j+1 ];
	               sel_elite[ j+1 ] = temp;
	               flag = true;
              }
            }
	    }
	}

	public  double dameMediaAdaptacion()
	{
		double unaMedia=0;
		double total=0;
		Iterator<Individuo>  unIterador=individuos.iterator();

		while (unIterador.hasNext())
		{

			total+=(Double)unIterador.next().getadaptacion_bruta();
		}
		unaMedia=(double)total/(double) this.size();

		return unaMedia;
	}

	
	private void mutacionInsercion(int ind) {
		Individuo unIndividuo=individuos.get(ind);
		int lcrom=unIndividuo.lcrom;
		int numeroInserciones=Calculadora.dameRandom(1, lcrom-1);
		
		int unIndice=0;
		int otroIndice=0;	
		Gen unGen=null;
		List<Gen> listaAuxiliar=new ArrayList();
		for (int i=0;i<numeroInserciones;i++)
		{
			unIndice=Calculadora.dameRandom(0,lcrom-1);
			otroIndice=lcrom-1;Calculadora.dameRandom(unIndice+1,lcrom-1);			
			
			//guardo copia de elemento que voy a machacar
			unGen=unIndividuo.genes.get(otroIndice);
			//encadeno dos listas			
			for (int k=0;k<=unIndice;k++)
			{
				if (k!=unIndice)
					listaAuxiliar.add(unIndividuo.genes.get(k));
				else
					listaAuxiliar.add(unIndividuo.genes.get(otroIndice));	
			}
							
		    for (int k=unIndice;k<lcrom;k++)
		    {
		    	if (k!=otroIndice)
		    		listaAuxiliar.add(unIndividuo.genes.get(k));
		    	
		    }
		
		    
		    //copio la lista encadenada en individuo
		    for (int k=0;k<lcrom;k++)
		    {
		    	unIndividuo.genes.set(k, listaAuxiliar.get(k));
		    }
		    unIndividuo.decod();
		}

	}

	void swapGen(List<Gen> listaGenes ,int a, int b)
	{
	Gen g3= listaGenes.get(a);
	listaGenes.set(a, listaGenes.get(b));
	listaGenes.set(b,g3);
	}
	
	private void mutacionIntercambio(int i) {
		
		int lcrom=individuos.get(i).lcrom;
		
		int a= Calculadora.dameRandom(0, lcrom-1);
		int b= Calculadora.dameRandom(0, lcrom-1);
		
		while (a==b)
			b= Calculadora.dameRandom(0, lcrom-1);
		
		swapGen(individuos.get(i).genes,a,b);
	}

	private void mutacionInversion(int ind) {

		Individuo unIndividuo=individuos.get(ind);
		int lcrom=unIndividuo.lcrom;
		
		
		int unIndice=0;
		int otroIndice=0;	
		unIndice=Calculadora.dameRandom(0,lcrom-1);
		otroIndice=Calculadora.dameRandom(unIndice+1,lcrom-1);		
		boolean esPar=((otroIndice-unIndice+1) %2 ==0);
		int dist=((otroIndice-unIndice+1)/2);
		if (!esPar) dist++;
					
		for (int i=0;i<dist;i++)
		{
			this.swapGen(unIndividuo.genes, unIndice+i, otroIndice-i);
			
		}		
		unIndividuo.decod();
	}

	private void mutacionHeuristica(int i) {

	}

	//mutaciÃ³n combinada
	//se aplica inversiÃ³n y luego inserciÃ³n de dicho tramo mutado
	private void mutacionInventada(int ind) {
		Individuo unIndividuo=individuos.get(ind);
		int lcrom=unIndividuo.lcrom;
		
		//coordenadas de inversiÃ³n
		int unIndice=Calculadora.dameRandom(0,lcrom-1);
		int otroIndice=Calculadora.dameRandom(unIndice+1,lcrom-1);
		//lugar en el que inserto la cadena invertida
		int tercerIndice=Calculadora.dameRandom(0,lcrom-1);
		List<Gen> listaAuxiliar=new ArrayList();
		List<Gen> listaAuxiliar2=new ArrayList();
		boolean esPar=((otroIndice-unIndice+1) %2 ==0);
		int dist=((otroIndice-unIndice+1)/2);
		if (!esPar) dist++;
					
		for (int i=0;i<dist;i++)
		{
			this.swapGen(unIndividuo.genes, unIndice+i, otroIndice-i);
			
		}		
		unIndividuo.decod();
		//hago una copia de la lista de invertidos
		 for (int k=unIndice;k<=otroIndice;k++)
		    {
		    	listaAuxiliar2.add(unIndividuo.genes.get(k));
		    	
		    }
		 
		 for (int k=unIndice;k<=otroIndice;k++)
		    {
		    	listaAuxiliar2.add(unIndividuo.genes.get(k));
		    	
		    }
		 
		 //borro los elmentos que me he guardado
		 for (int k=unIndice;k<=otroIndice;k++)
		    {
		    	unIndividuo.genes.remove(k);
		    	
		    }
		
		//inserciÃ³n
		
		listaAuxiliar.clear();
	
		unIndice=Calculadora.dameRandom(0,lcrom-1);
		otroIndice=lcrom-1;Calculadora.dameRandom(unIndice+1,lcrom-1);			
		
		//guardo copia de elemento que voy a machacar
		Gen unGen=unIndividuo.genes.get(otroIndice);
		//encadeno dos listas			
		for (int k=0;k<=unIndice;k++)
		{
			if (k!=unIndice)
				listaAuxiliar.add(unIndividuo.genes.get(k));
			else
				for (int i=0;i<listaAuxiliar2.size();i++)
				{
				listaAuxiliar.add(listaAuxiliar2.get(i));
				}
		}
						
	    for (int k=unIndice;k<lcrom;k++)
	    {
	    	if (!(k>unIndice &&k<=otroIndice))
	    		listaAuxiliar.add(unIndividuo.genes.get(k));
	    	
	    }
	
		
					    
	    //copio la lista encadenada en individuo
	    for (int k=0;k<lcrom;k++)
	    {
	    	unIndividuo.genes.set(k, listaAuxiliar.get(k));
	    }
	    unIndividuo.decod();
		
		
		
		
	}
}
