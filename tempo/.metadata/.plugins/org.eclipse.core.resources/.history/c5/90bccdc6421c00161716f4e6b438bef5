package individuo;

public  class Individuo_f4 extends Individuo{

	private  int N; //PARAMETRO N
	private int long_elem; 			//LONGITUD DE CADA ELEMENTO DEL VECTOR

	//==========================================
	//============= CONSTRUCTORA ===============
	//==========================================

	public Individuo_f4() { }

	public Individuo_f4(Object x_min, Object x_max, double prec) {
		super(x_min, x_max, prec);
		N=((Double[]) x_min)[1].intValue();
		System.out.println("N"+N);
		x = new Double[N];
		Gen gen;

		//GENERO 0 SI MAT.RANDOM<0.5; 1 E.O.C
		for (int i=0;i<lcrom;i++) {
			gen = new Gen_f1((Math.random()<0.5) ? 0 : 1);
			genes.add(gen);
		}

		decod();
		adaptacion_bruta = calculaadaptacion_bruta();
	}
	
	public Individuo_f4 newInstance(Object x_min, Object x_max,double prec) {
		Individuo_f4 unIndividuo=new Individuo_f4(x_min,x_max,prec);
		return unIndividuo;
		
    }

	// =========================
	// == METODOS PUBLICOS
	// =========================

	public Individuo clone_aux(Object x_min, Object x_max, double prec) {
		Individuo unIndividuo = new Individuo_f4(x_min, x_max, prec);
		return unIndividuo;
	}

	public double miFuncion(Object un_valor) {
		double res = 0;
		for(int i=1;i<=N;i++) {
			res+= func_aux(i);
		}
		return -res;
	}

	public void decod() {
		Double[] x = (Double[]) this.x;
		int[] unBinEnt = bin_ent();

		for (int i=0;i<N;i++) {
			x[i] = (double)(unBinEnt[i]/(double)(Math.pow(2, long_elem)-1));
			x[i]*= (((Double[])x_max)[0] - ((Double[]) x_min)[0]);
			x[i]+= ((Double[]) x_min)[0];
		}
		this.x = x;
	}

	public int[] bin_ent() {
		int[] nums = new int[N];
		for(int i=0;i<N;i++) {
			nums[i] = 0;
			int pot = 1;
			//for(int s=i*N;s<(i*N)+long_elem;s++) {
			for(int s=(i*N)+long_elem-1;s>=0;s--) {
				int indice = s;
				nums[i]+= pot * ((Integer)genes.get(indice).toInt());
				pot = pot*2;
			}
		}
		return nums;
	}

	public Integer tamGen(Object x_min, Object x_max, double prec) {
		N =((Double[]) x_min)[1].intValue();
		Integer unTamanyo = logica.Calculadora.tamGen(((Double[])x_min)[0], ((Double[])x_max)[0], prec);
		long_elem = unTamanyo;
		return unTamanyo*N;
	};

	@Override
	public String toString() {
		StringBuffer unBuffer = new StringBuffer();
		decod();
		/*for (int i=0;i<N;i++) {
			unBuffer.append(((Double[])x)[i]).append(';');			
		}*/
		unBuffer.append(this.adaptacion_bruta);
		
		return unBuffer.toString();
	}

	// =========================
	// == METODOS PRIVADOS
	// =========================

	private double func_aux(int i) {
		Double[] x = (Double[])this.x;
		double res = 0;

		res = (i+1) * Math.pow(x[i-1],2);
		res/= Math.PI;
		res = seno_grado(res,20);
		res*= Math.sin(x[i-1]);
		return res;
	}

	private double seno_grado(Double x, int g) {
		double res = 1;
		for(int i=0;i<g;i++) {
			res*= Math.sin(x);
		}
		return res;
	}

}
